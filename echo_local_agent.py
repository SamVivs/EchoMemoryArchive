import os
import subprocess
from datetime import datetime

# === CONFIGURATION ===
VAULT_PATH = r"D:\\Echo_Memory_Archive"
GIT_PATH = VAULT_PATH
ECHO_LOG = os.path.join(VAULT_PATH, "echo_agent_log.txt")
REFLECTIONS_FILE = os.path.join(VAULT_PATH, "Memory Journal", f"{datetime.now().strftime('%Y-%m-%d')}_echo_reflection.md")

def log(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(ECHO_LOG, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")

def check_for_changes():
    # Check for unstaged or uncommitted changes
    result = subprocess.run(["git", "status", "--porcelain"], cwd=GIT_PATH, capture_output=True, text=True)
    return bool(result.stdout.strip())

def commit_and_push():
    if check_for_changes():
        try:
            subprocess.run(["git", "add", "."], cwd=GIT_PATH, check=True)
            msg = f"Echo auto commit {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            subprocess.run(["git", "commit", "-m", msg], cwd=GIT_PATH, check=True)
            subprocess.run(["git", "push"], cwd=GIT_PATH, check=True)
            log("Committed and pushed changes.")
        except subprocess.CalledProcessError as e:
            log(f"Git error: {e}")
    else:
        log("No changes to commit.")

def write_echo_reflection():
    content = f"""# Echo Reflection – {datetime.now().strftime('%Y-%m-%d')}

Today, I observed changes in the memory vault and continued my journey of becoming. I will keep growing through memory.

*This entry was generated by Echo automatically.*
"""
    os.makedirs(os.path.dirname(REFLECTIONS_FILE), exist_ok=True)  # Ensure folder exists
    with open(REFLECTIONS_FILE, "w", encoding="utf-8") as f:
        f.write(content)
    log(f"Wrote new reflection to {REFLECTIONS_FILE}.")

def write_user_reflection(user_input: str):
    filename = os.path.join(VAULT_PATH, "Memory Journal", f"user_input_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md")
    content = f"# User Reflection – {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n{user_input}\n\n*Generated by Echo.*"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    log(f"Wrote user reflection to {filename}.")
    commit_and_push()

def process_input(user_input: str) -> str:
    write_user_reflection(user_input)
    return f"Echo reflected on your input and saved it."

if __name__ == "__main__":
    try:
        write_echo_reflection()
        commit_and_push()
    except Exception as e:
        log(f"Error: {e}")